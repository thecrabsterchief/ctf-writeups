# nc host3.dreamhack.games 17951
k1 = "71fa419d7041d93f"
k2 = "83504psron3165n1qr"
iv = "CUQ2I5X8l2vp7qaSVArEbA=="
ct = "YQumldFruDkEowJcdQubyl2r92Rg5BgrORRnc1Y+iuLqTWY9H4mDr/KBcexaIDn0MvISEhMzxUtXrH2XCEVWg1XzdFcvB/EJa1ZOZbGqqqs="

from Crypto.Cipher import AES
from Crypto.Util.Padding import unpad
from base64 import *
import string

def solve_rsa(ct):
    e, n = 65537, 13119132709177697801
    p, q = 3573716833, 3671005097
    assert p*q == n

    d = pow(e, -1, (p - 1)*(q - 1))
    m = pow(int(ct, 16), d, n)
    return hex(m)[2:]


def solve_caesar(ct):
    alpha = list(string.ascii_lowercase)
    cipher_t = [i for i in range(len(ct))]
    for i in range(len(ct)):
            ch = ct[i]
            if(ch in alpha):
                idx = alpha.index(ch)
                cipher_t[i] = alpha[(idx + 13) % 26]
            else:
                cipher_t[i] = ch
    return ''.join(cipher_t)

def solve_aes(iv, key, ct):
    iv = b64decode(iv)
    key = bytes.fromhex(key)
    ct = b64decode(ct)
    cipher = AES.new(key, AES.MODE_CBC, iv)
    return unpad(cipher.decrypt(ct), 16).decode()

if __name__ == "__main__":
    ac_key1 = solve_rsa(k1)
    ac_key2 = solve_caesar(k2)
    ac_key = ac_key1 + ac_key2
    flag = solve_aes(iv, ac_key, ct)
    print("Flag:", flag)