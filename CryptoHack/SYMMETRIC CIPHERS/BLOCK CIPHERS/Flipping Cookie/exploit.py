import requests

def get_cookie():
    res = requests.get(
        url="https://aes.cryptohack.org/flipping_cookie/get_cookie/"
    ).json()["cookie"]
    res = bytes.fromhex(res)
    iv, ct = res[:16], res[16:]
    return iv, ct

def check_admin(cookie: bytes, iv: bytes):
    flag = requests.get(
        url="https://aes.cryptohack.org/flipping_cookie/check_admin/{}/{}".format(cookie.hex(), iv.hex())
    ).json()["flag"]

    print("Flag:", flag)

def attack(iv, ciphertext, pos, origin_plaintext, forgery_plaintext):
    """ Replaces the original plaintext with a new plaintext at a position in the ciphertext.

    :param `iv`: the initialization vector.
    :param `ciphertext`: the ciphertext.
    :param `pos`: the position to modify at.
    :param `origin_plaintext`: the original plaintext.
    :param `forgery_plaintext`: the forgery plaintext.
    :return: `new payload = new_iv || new_ciphertext`.
    """
    
    # sanity check
    assert len(origin_plaintext) == len(forgery_plaintext)
    blocks = bytearray(iv + ciphertext)
    
    for i in range(len(origin_plaintext)):
        blocks[pos + i] ^= origin_plaintext[i] ^ forgery_plaintext[i]

    return bytes(blocks)

if __name__ == "__main__":
    iv, ct = get_cookie()

    #     cookie = f"admin=False;expiry={expires_at}".encode()
    # -> forgery =  "admin=True;"
    payload = attack(
        ciphertext=ct, iv=iv, pos=6,
        origin_plaintext=b"False",
        forgery_plaintext=b"True;"
    )

    new_iv, new_ct = payload[:16], payload[16:]
    check_admin(cookie=new_ct, iv=new_iv)