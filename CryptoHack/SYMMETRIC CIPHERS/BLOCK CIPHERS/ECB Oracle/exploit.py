import requests

def oracle(plaintext: bytes) -> bytes:
    res = requests.get(
        url="https://aes.cryptohack.org/ecb_oracle/encrypt/{}/".format(plaintext.hex())
    ).json()["ciphertext"]
    return bytes.fromhex(res)

def attack(encrypt_oracle, block_size=16, null=0, debug=False, known_prefix_secret=bytearray()):
    """ Recovers a secret which is appended to a plaintext and encrypted using ECB.
        Reference: https://zachgrace.com/posts/attacking-ecb/
        
    :param `encrypt_oracle`: the encryption oracle, example: `encrypt_oracle(plain)` -> ECB(plain || secret).
    :param `block_size`: the size of each block, by default: `blocksize=16`.
    :param `null`: a byte that's never used in the secret, by default `null=0`.
    :param `debug`: for debug info, by default: `debug=False`
    :param `known_prefix_secret`: use this param if we know the prefix of secret. Example if the secret is 
        `flag` (in CTF challenges) then we can use like this: `known_prefix_secret=bytearray(b'flag{')`. 
    :return: the secret.
    """

    paddings = [bytes([null] * i) for i in range(block_size)]
    secret = known_prefix_secret

    while True:
        padding = paddings[block_size - 1 - (len(secret) % block_size)]
        payload = bytearray(padding + secret + b"?" + padding) # brute at character "?"
        brute_index = len(padding) + len(secret) # index of b"?"

        end_true  = len(padding) + len(secret) + 1
        end_guess = end_true + len(padding) + len(secret) + 1

        # only brute ascii printable.
        for char in range(36, 127): 
            payload[brute_index] = char
            ct = encrypt_oracle(payload)
            
            if ct[end_true - block_size:end_true] == ct[end_guess - block_size:end_guess]:
                secret.append(char)
                if debug:
                    print("[DEBUG] Secret: {}".format(secret.decode()))
                break
        
        # break if not found any correct `char` in above loop.
        else:
            break

    return bytes(secret)

if __name__ == '__main__':
    flag = attack(
        encrypt_oracle=oracle, 
        known_prefix_secret=bytearray(b'crypto{'), 
        debug=True
    )